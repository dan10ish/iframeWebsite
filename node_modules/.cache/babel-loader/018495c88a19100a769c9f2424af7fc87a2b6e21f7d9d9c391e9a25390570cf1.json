{"ast":null,"code":"import * as r from \"three\";\nfunction c(a, t, e, i, s) {\n  let n;\n  if (a = a.subarray || a.slice ? a : a.buffer, e = e.subarray || e.slice ? e : e.buffer, a = t ? a.subarray ? a.subarray(t, s && t + s) : a.slice(t, s && t + s) : a, e.set) e.set(a, i);else for (n = 0; n < a.length; n++) e[n + i] = a[n];\n  return e;\n}\nclass S extends r.BufferGeometry {\n  constructor() {\n    super(), this.type = \"MeshLine\", this.isMeshLine = !0, this.positions = [], this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [], this.counters = [], this._points = [], this._geom = null, this.widthCallback = null, this.matrixWorld = new r.Matrix4(), Object.defineProperties(this, {\n      geometry: {\n        enumerable: !0,\n        get() {\n          return this._geom;\n        },\n        set(t) {\n          this.setGeometry(t, this.widthCallback);\n        }\n      },\n      points: {\n        enumerable: !0,\n        get() {\n          return this._points;\n        },\n        set(t) {\n          this.setPoints(t, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(t) {\n    this.matrixWorld = t;\n  }\n  setGeometry(t, e) {\n    t instanceof r.BufferGeometry && (this._geometry = t, this.setPoints(t.getAttribute(\"position\").array, e));\n  }\n  setPoints(t, e) {\n    if (!(t instanceof Float32Array) && !(t instanceof Array)) {\n      console.error(\"ERROR: The BufferArray of points is not instancied correctly.\");\n      return;\n    }\n    if (this._points = t, this.widthCallback = e, this.positions = [], this.counters = [], t.length && t[0] instanceof r.Vector3) for (let i = 0; i < t.length; i++) {\n      const s = t[i],\n        n = i / (t.length - 1);\n      this.positions.push(s.x, s.y, s.z), this.positions.push(s.x, s.y, s.z), this.counters.push(n), this.counters.push(n);\n    } else for (let i = 0; i < t.length; i += 3) {\n      const s = i / (t.length - 1);\n      this.positions.push(t[i], t[i + 1], t[i + 2]), this.positions.push(t[i], t[i + 1], t[i + 2]), this.counters.push(s), this.counters.push(s);\n    }\n    this.process();\n  }\n  compareV3(t, e) {\n    const i = t * 6,\n      s = e * 6;\n    return this.positions[i] === this.positions[s] && this.positions[i + 1] === this.positions[s + 1] && this.positions[i + 2] === this.positions[s + 2];\n  }\n  copyV3(t) {\n    const e = t * 6;\n    return [this.positions[e], this.positions[e + 1], this.positions[e + 2]];\n  }\n  process() {\n    const t = this.positions.length / 6;\n    this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [];\n    let e, i;\n    this.compareV3(0, t - 1) ? i = this.copyV3(t - 2) : i = this.copyV3(0), this.previous.push(i[0], i[1], i[2]), this.previous.push(i[0], i[1], i[2]);\n    for (let s = 0; s < t; s++) {\n      if (this.side.push(1), this.side.push(-1), this.widthCallback ? e = this.widthCallback(s / (t - 1)) : e = 1, this.width.push(e), this.width.push(e), this.uvs.push(s / (t - 1), 0), this.uvs.push(s / (t - 1), 1), s < t - 1) {\n        i = this.copyV3(s), this.previous.push(i[0], i[1], i[2]), this.previous.push(i[0], i[1], i[2]);\n        const n = s * 2;\n        this.indices_array.push(n, n + 1, n + 2), this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      s > 0 && (i = this.copyV3(s), this.next.push(i[0], i[1], i[2]), this.next.push(i[0], i[1], i[2]));\n    }\n    this.compareV3(t - 1, 0) ? i = this.copyV3(1) : i = this.copyV3(t - 1), this.next.push(i[0], i[1], i[2]), this.next.push(i[0], i[1], i[2]), !this._attributes || this._attributes.position.count !== this.positions.length ? this._attributes = {\n      position: new r.BufferAttribute(new Float32Array(this.positions), 3),\n      previous: new r.BufferAttribute(new Float32Array(this.previous), 3),\n      next: new r.BufferAttribute(new Float32Array(this.next), 3),\n      side: new r.BufferAttribute(new Float32Array(this.side), 1),\n      width: new r.BufferAttribute(new Float32Array(this.width), 1),\n      uv: new r.BufferAttribute(new Float32Array(this.uvs), 2),\n      index: new r.BufferAttribute(new Uint16Array(this.indices_array), 1),\n      counters: new r.BufferAttribute(new Float32Array(this.counters), 1)\n    } : (this._attributes.position.copyArray(new Float32Array(this.positions)), this._attributes.position.needsUpdate = !0, this._attributes.previous.copyArray(new Float32Array(this.previous)), this._attributes.previous.needsUpdate = !0, this._attributes.next.copyArray(new Float32Array(this.next)), this._attributes.next.needsUpdate = !0, this._attributes.side.copyArray(new Float32Array(this.side)), this._attributes.side.needsUpdate = !0, this._attributes.width.copyArray(new Float32Array(this.width)), this._attributes.width.needsUpdate = !0, this._attributes.uv.copyArray(new Float32Array(this.uvs)), this._attributes.uv.needsUpdate = !0, this._attributes.index.copyArray(new Uint16Array(this.indices_array)), this._attributes.index.needsUpdate = !0), this.setAttribute(\"position\", this._attributes.position), this.setAttribute(\"previous\", this._attributes.previous), this.setAttribute(\"next\", this._attributes.next), this.setAttribute(\"side\", this._attributes.side), this.setAttribute(\"width\", this._attributes.width), this.setAttribute(\"uv\", this._attributes.uv), this.setAttribute(\"counters\", this._attributes.counters), this.setIndex(this._attributes.index), this.computeBoundingSphere(), this.computeBoundingBox();\n  }\n  advance(_ref) {\n    let {\n      x: t,\n      y: e,\n      z: i\n    } = _ref;\n    const s = this._attributes.position.array,\n      n = this._attributes.previous.array,\n      u = this._attributes.next.array,\n      o = s.length;\n    c(s, 0, n, 0, o), c(s, 6, s, 0, o - 6), s[o - 6] = t, s[o - 5] = e, s[o - 4] = i, s[o - 3] = t, s[o - 2] = e, s[o - 1] = i, c(s, 6, u, 0, o - 6), u[o - 6] = t, u[o - 5] = e, u[o - 4] = i, u[o - 3] = t, u[o - 2] = e, u[o - 1] = i, this._attributes.position.needsUpdate = !0, this._attributes.previous.needsUpdate = !0, this._attributes.next.needsUpdate = !0;\n  }\n}\nr.ShaderChunk.meshline_vert = `\n  #include <common>\n  ${r.ShaderChunk.logdepthbuf_pars_vertex}\n  ${r.ShaderChunk.fog_pars_vertex}\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    ${r.ShaderChunk.logdepthbuf_vertex}\n    ${r.ShaderChunk.fog_vertex}\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    ${r.ShaderChunk.fog_vertex}\n  }`;\nr.ShaderChunk.meshline_frag = `\n  \n  ${r.ShaderChunk.fog_pars_fragment}\n  ${r.ShaderChunk.logdepthbuf_pars_fragment}\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    ${r.ShaderChunk.logdepthbuf_fragment}\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    ${r.ShaderChunk.fog_fragment}\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }`;\nclass V extends r.ShaderMaterial {\n  constructor(t) {\n    super({\n      uniforms: Object.assign({}, r.UniformsLib.fog, {\n        lineWidth: {\n          value: 1\n        },\n        map: {\n          value: null\n        },\n        useMap: {\n          value: 0\n        },\n        alphaMap: {\n          value: null\n        },\n        useAlphaMap: {\n          value: 0\n        },\n        color: {\n          value: new r.Color(16777215)\n        },\n        opacity: {\n          value: 1\n        },\n        resolution: {\n          value: new r.Vector2(1, 1)\n        },\n        sizeAttenuation: {\n          value: 1\n        },\n        dashArray: {\n          value: 0\n        },\n        dashOffset: {\n          value: 0\n        },\n        dashRatio: {\n          value: 0.5\n        },\n        useDash: {\n          value: 0\n        },\n        visibility: {\n          value: 1\n        },\n        alphaTest: {\n          value: 0\n        },\n        repeat: {\n          value: new r.Vector2(1, 1)\n        }\n      }),\n      vertexShader: r.ShaderChunk.meshline_vert,\n      fragmentShader: r.ShaderChunk.meshline_frag\n    }), this.type = \"MeshLineMaterial\", Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(e) {\n          this.uniforms.lineWidth.value = e;\n        }\n      },\n      map: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(e) {\n          this.uniforms.map.value = e;\n        }\n      },\n      useMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(e) {\n          this.uniforms.useMap.value = e;\n        }\n      },\n      alphaMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(e) {\n          this.uniforms.alphaMap.value = e;\n        }\n      },\n      useAlphaMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(e) {\n          this.uniforms.useAlphaMap.value = e;\n        }\n      },\n      color: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(e) {\n          this.uniforms.color.value = e;\n        }\n      },\n      opacity: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(e) {\n          this.uniforms.opacity.value = e;\n        }\n      },\n      resolution: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(e) {\n          this.uniforms.resolution.value.copy(e);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(e) {\n          this.uniforms.sizeAttenuation.value = e;\n        }\n      },\n      dashArray: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(e) {\n          this.uniforms.dashArray.value = e, this.useDash = e !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(e) {\n          this.uniforms.dashOffset.value = e;\n        }\n      },\n      dashRatio: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(e) {\n          this.uniforms.dashRatio.value = e;\n        }\n      },\n      useDash: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(e) {\n          this.uniforms.useDash.value = e;\n        }\n      },\n      visibility: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(e) {\n          this.uniforms.visibility.value = e;\n        }\n      },\n      alphaTest: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(e) {\n          this.uniforms.alphaTest.value = e;\n        }\n      },\n      repeat: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(e) {\n          this.uniforms.repeat.value.copy(e);\n        }\n      }\n    }), this.setValues(t);\n  }\n  copy(t) {\n    return super.copy(t), this.lineWidth = t.lineWidth, this.map = t.map, this.useMap = t.useMap, this.alphaMap = t.alphaMap, this.useAlphaMap = t.useAlphaMap, this.color.copy(t.color), this.opacity = t.opacity, this.resolution.copy(t.resolution), this.sizeAttenuation = t.sizeAttenuation, this.dashArray.copy(t.dashArray), this.dashOffset.copy(t.dashOffset), this.dashRatio.copy(t.dashRatio), this.useDash = t.useDash, this.visibility = t.visibility, this.alphaTest = t.alphaTest, this.repeat.copy(t.repeat), this;\n  }\n}\nfunction k(a, t) {\n  const e = new r.Matrix4(),\n    i = new r.Ray(),\n    s = new r.Sphere(),\n    n = new r.Vector3(),\n    u = this.geometry;\n  if (s.copy(u.boundingSphere), s.applyMatrix4(this.matrixWorld), a.ray.intersectSphere(s, n) === !1) return;\n  e.copy(this.matrixWorld).invert(), i.copy(a.ray).applyMatrix4(e);\n  const o = new r.Vector3(),\n    f = new r.Vector3(),\n    d = new r.Vector3(),\n    A = this instanceof r.LineSegments ? 2 : 1,\n    v = u.index,\n    m = u.attributes;\n  if (v !== null) {\n    const l = v.array,\n      y = m.position.array,\n      b = m.width.array;\n    for (let h = 0, x = l.length - 1; h < x; h += A) {\n      const w = l[h],\n        _ = l[h + 1];\n      o.fromArray(y, w * 3), f.fromArray(y, _ * 3);\n      const M = b[Math.floor(h / 3)] != null ? b[Math.floor(h / 3)] : 1,\n        g = a.params.Line.threshold + this.material.lineWidth * M / 2,\n        C = g * g;\n      if (i.distanceSqToSegment(o, f, n, d) > C) continue;\n      n.applyMatrix4(this.matrixWorld);\n      const p = a.ray.origin.distanceTo(n);\n      p < a.near || p > a.far || (t.push({\n        distance: p,\n        point: d.clone().applyMatrix4(this.matrixWorld),\n        index: h,\n        face: null,\n        faceIndex: null,\n        object: this\n      }), h = x);\n    }\n  }\n}\nexport { S as MeshLineGeometry, V as MeshLineMaterial, k as raycast };","map":{"version":3,"names":["r","c","a","t","e","i","s","n","subarray","slice","buffer","set","length","S","BufferGeometry","constructor","type","isMeshLine","positions","previous","next","side","width","indices_array","uvs","counters","_points","_geom","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","setGeometry","points","setPoints","setMatrixWorld","_geometry","getAttribute","array","Float32Array","Array","console","error","Vector3","push","x","y","z","process","compareV3","copyV3","_attributes","position","count","BufferAttribute","uv","index","Uint16Array","copyArray","needsUpdate","setAttribute","setIndex","computeBoundingSphere","computeBoundingBox","advance","u","o","ShaderChunk","meshline_vert","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","meshline_frag","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","V","ShaderMaterial","uniforms","assign","UniformsLib","fog","lineWidth","value","map","useMap","alphaMap","useAlphaMap","color","Color","opacity","resolution","Vector2","sizeAttenuation","dashArray","dashOffset","dashRatio","useDash","visibility","alphaTest","repeat","vertexShader","fragmentShader","copy","setValues","k","Ray","Sphere","boundingSphere","applyMatrix4","ray","intersectSphere","invert","f","d","A","LineSegments","v","m","attributes","l","b","h","w","_","fromArray","M","Math","floor","g","params","Line","threshold","material","C","distanceSqToSegment","p","origin","distanceTo","near","far","distance","point","clone","face","faceIndex","object","MeshLineGeometry","MeshLineMaterial","raycast"],"sources":["/Users/danish/Documents/portfolio/node_modules/meshline/dist/index.js"],"sourcesContent":["import * as r from \"three\";\nfunction c(a, t, e, i, s) {\n  let n;\n  if (a = a.subarray || a.slice ? a : a.buffer, e = e.subarray || e.slice ? e : e.buffer, a = t ? a.subarray ? a.subarray(t, s && t + s) : a.slice(t, s && t + s) : a, e.set)\n    e.set(a, i);\n  else\n    for (n = 0; n < a.length; n++)\n      e[n + i] = a[n];\n  return e;\n}\nclass S extends r.BufferGeometry {\n  constructor() {\n    super(), this.type = \"MeshLine\", this.isMeshLine = !0, this.positions = [], this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [], this.counters = [], this._points = [], this._geom = null, this.widthCallback = null, this.matrixWorld = new r.Matrix4(), Object.defineProperties(this, {\n      geometry: {\n        enumerable: !0,\n        get() {\n          return this._geom;\n        },\n        set(t) {\n          this.setGeometry(t, this.widthCallback);\n        }\n      },\n      points: {\n        enumerable: !0,\n        get() {\n          return this._points;\n        },\n        set(t) {\n          this.setPoints(t, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(t) {\n    this.matrixWorld = t;\n  }\n  setGeometry(t, e) {\n    t instanceof r.BufferGeometry && (this._geometry = t, this.setPoints(t.getAttribute(\"position\").array, e));\n  }\n  setPoints(t, e) {\n    if (!(t instanceof Float32Array) && !(t instanceof Array)) {\n      console.error(\"ERROR: The BufferArray of points is not instancied correctly.\");\n      return;\n    }\n    if (this._points = t, this.widthCallback = e, this.positions = [], this.counters = [], t.length && t[0] instanceof r.Vector3)\n      for (let i = 0; i < t.length; i++) {\n        const s = t[i], n = i / (t.length - 1);\n        this.positions.push(s.x, s.y, s.z), this.positions.push(s.x, s.y, s.z), this.counters.push(n), this.counters.push(n);\n      }\n    else\n      for (let i = 0; i < t.length; i += 3) {\n        const s = i / (t.length - 1);\n        this.positions.push(t[i], t[i + 1], t[i + 2]), this.positions.push(t[i], t[i + 1], t[i + 2]), this.counters.push(s), this.counters.push(s);\n      }\n    this.process();\n  }\n  compareV3(t, e) {\n    const i = t * 6, s = e * 6;\n    return this.positions[i] === this.positions[s] && this.positions[i + 1] === this.positions[s + 1] && this.positions[i + 2] === this.positions[s + 2];\n  }\n  copyV3(t) {\n    const e = t * 6;\n    return [this.positions[e], this.positions[e + 1], this.positions[e + 2]];\n  }\n  process() {\n    const t = this.positions.length / 6;\n    this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [];\n    let e, i;\n    this.compareV3(0, t - 1) ? i = this.copyV3(t - 2) : i = this.copyV3(0), this.previous.push(i[0], i[1], i[2]), this.previous.push(i[0], i[1], i[2]);\n    for (let s = 0; s < t; s++) {\n      if (this.side.push(1), this.side.push(-1), this.widthCallback ? e = this.widthCallback(s / (t - 1)) : e = 1, this.width.push(e), this.width.push(e), this.uvs.push(s / (t - 1), 0), this.uvs.push(s / (t - 1), 1), s < t - 1) {\n        i = this.copyV3(s), this.previous.push(i[0], i[1], i[2]), this.previous.push(i[0], i[1], i[2]);\n        const n = s * 2;\n        this.indices_array.push(n, n + 1, n + 2), this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      s > 0 && (i = this.copyV3(s), this.next.push(i[0], i[1], i[2]), this.next.push(i[0], i[1], i[2]));\n    }\n    this.compareV3(t - 1, 0) ? i = this.copyV3(1) : i = this.copyV3(t - 1), this.next.push(i[0], i[1], i[2]), this.next.push(i[0], i[1], i[2]), !this._attributes || this._attributes.position.count !== this.positions.length ? this._attributes = {\n      position: new r.BufferAttribute(new Float32Array(this.positions), 3),\n      previous: new r.BufferAttribute(new Float32Array(this.previous), 3),\n      next: new r.BufferAttribute(new Float32Array(this.next), 3),\n      side: new r.BufferAttribute(new Float32Array(this.side), 1),\n      width: new r.BufferAttribute(new Float32Array(this.width), 1),\n      uv: new r.BufferAttribute(new Float32Array(this.uvs), 2),\n      index: new r.BufferAttribute(new Uint16Array(this.indices_array), 1),\n      counters: new r.BufferAttribute(new Float32Array(this.counters), 1)\n    } : (this._attributes.position.copyArray(new Float32Array(this.positions)), this._attributes.position.needsUpdate = !0, this._attributes.previous.copyArray(new Float32Array(this.previous)), this._attributes.previous.needsUpdate = !0, this._attributes.next.copyArray(new Float32Array(this.next)), this._attributes.next.needsUpdate = !0, this._attributes.side.copyArray(new Float32Array(this.side)), this._attributes.side.needsUpdate = !0, this._attributes.width.copyArray(new Float32Array(this.width)), this._attributes.width.needsUpdate = !0, this._attributes.uv.copyArray(new Float32Array(this.uvs)), this._attributes.uv.needsUpdate = !0, this._attributes.index.copyArray(new Uint16Array(this.indices_array)), this._attributes.index.needsUpdate = !0), this.setAttribute(\"position\", this._attributes.position), this.setAttribute(\"previous\", this._attributes.previous), this.setAttribute(\"next\", this._attributes.next), this.setAttribute(\"side\", this._attributes.side), this.setAttribute(\"width\", this._attributes.width), this.setAttribute(\"uv\", this._attributes.uv), this.setAttribute(\"counters\", this._attributes.counters), this.setIndex(this._attributes.index), this.computeBoundingSphere(), this.computeBoundingBox();\n  }\n  advance({ x: t, y: e, z: i }) {\n    const s = this._attributes.position.array, n = this._attributes.previous.array, u = this._attributes.next.array, o = s.length;\n    c(s, 0, n, 0, o), c(s, 6, s, 0, o - 6), s[o - 6] = t, s[o - 5] = e, s[o - 4] = i, s[o - 3] = t, s[o - 2] = e, s[o - 1] = i, c(s, 6, u, 0, o - 6), u[o - 6] = t, u[o - 5] = e, u[o - 4] = i, u[o - 3] = t, u[o - 2] = e, u[o - 1] = i, this._attributes.position.needsUpdate = !0, this._attributes.previous.needsUpdate = !0, this._attributes.next.needsUpdate = !0;\n  }\n}\nr.ShaderChunk.meshline_vert = `\n  #include <common>\n  ${r.ShaderChunk.logdepthbuf_pars_vertex}\n  ${r.ShaderChunk.fog_pars_vertex}\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n  \tvCounters = counters;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0);\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    ${r.ShaderChunk.logdepthbuf_vertex}\n    ${r.ShaderChunk.fog_vertex}\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    ${r.ShaderChunk.fog_vertex}\n  }`;\nr.ShaderChunk.meshline_frag = `\n  \n  ${r.ShaderChunk.fog_pars_fragment}\n  ${r.ShaderChunk.logdepthbuf_pars_fragment}\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    ${r.ShaderChunk.logdepthbuf_fragment}\n    vec4 c = vColor;\n    if (useMap == 1.) c *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) c.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (c.a < alphaTest) discard;\n    if (useDash == 1.) {\n      c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    }\n    gl_FragColor = c;\n    gl_FragColor.a *= step(vCounters, visibility);\n    ${r.ShaderChunk.fog_fragment}\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }`;\nclass V extends r.ShaderMaterial {\n  constructor(t) {\n    super({\n      uniforms: Object.assign({}, r.UniformsLib.fog, {\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new r.Color(16777215) },\n        opacity: { value: 1 },\n        resolution: { value: new r.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new r.Vector2(1, 1) }\n      }),\n      vertexShader: r.ShaderChunk.meshline_vert,\n      fragmentShader: r.ShaderChunk.meshline_frag\n    }), this.type = \"MeshLineMaterial\", Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(e) {\n          this.uniforms.lineWidth.value = e;\n        }\n      },\n      map: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(e) {\n          this.uniforms.map.value = e;\n        }\n      },\n      useMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(e) {\n          this.uniforms.useMap.value = e;\n        }\n      },\n      alphaMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(e) {\n          this.uniforms.alphaMap.value = e;\n        }\n      },\n      useAlphaMap: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(e) {\n          this.uniforms.useAlphaMap.value = e;\n        }\n      },\n      color: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(e) {\n          this.uniforms.color.value = e;\n        }\n      },\n      opacity: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(e) {\n          this.uniforms.opacity.value = e;\n        }\n      },\n      resolution: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(e) {\n          this.uniforms.resolution.value.copy(e);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(e) {\n          this.uniforms.sizeAttenuation.value = e;\n        }\n      },\n      dashArray: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(e) {\n          this.uniforms.dashArray.value = e, this.useDash = e !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(e) {\n          this.uniforms.dashOffset.value = e;\n        }\n      },\n      dashRatio: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(e) {\n          this.uniforms.dashRatio.value = e;\n        }\n      },\n      useDash: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(e) {\n          this.uniforms.useDash.value = e;\n        }\n      },\n      visibility: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(e) {\n          this.uniforms.visibility.value = e;\n        }\n      },\n      alphaTest: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(e) {\n          this.uniforms.alphaTest.value = e;\n        }\n      },\n      repeat: {\n        enumerable: !0,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(e) {\n          this.uniforms.repeat.value.copy(e);\n        }\n      }\n    }), this.setValues(t);\n  }\n  copy(t) {\n    return super.copy(t), this.lineWidth = t.lineWidth, this.map = t.map, this.useMap = t.useMap, this.alphaMap = t.alphaMap, this.useAlphaMap = t.useAlphaMap, this.color.copy(t.color), this.opacity = t.opacity, this.resolution.copy(t.resolution), this.sizeAttenuation = t.sizeAttenuation, this.dashArray.copy(t.dashArray), this.dashOffset.copy(t.dashOffset), this.dashRatio.copy(t.dashRatio), this.useDash = t.useDash, this.visibility = t.visibility, this.alphaTest = t.alphaTest, this.repeat.copy(t.repeat), this;\n  }\n}\nfunction k(a, t) {\n  const e = new r.Matrix4(), i = new r.Ray(), s = new r.Sphere(), n = new r.Vector3(), u = this.geometry;\n  if (s.copy(u.boundingSphere), s.applyMatrix4(this.matrixWorld), a.ray.intersectSphere(s, n) === !1)\n    return;\n  e.copy(this.matrixWorld).invert(), i.copy(a.ray).applyMatrix4(e);\n  const o = new r.Vector3(), f = new r.Vector3(), d = new r.Vector3(), A = this instanceof r.LineSegments ? 2 : 1, v = u.index, m = u.attributes;\n  if (v !== null) {\n    const l = v.array, y = m.position.array, b = m.width.array;\n    for (let h = 0, x = l.length - 1; h < x; h += A) {\n      const w = l[h], _ = l[h + 1];\n      o.fromArray(y, w * 3), f.fromArray(y, _ * 3);\n      const M = b[Math.floor(h / 3)] != null ? b[Math.floor(h / 3)] : 1, g = a.params.Line.threshold + this.material.lineWidth * M / 2, C = g * g;\n      if (i.distanceSqToSegment(o, f, n, d) > C)\n        continue;\n      n.applyMatrix4(this.matrixWorld);\n      const p = a.ray.origin.distanceTo(n);\n      p < a.near || p > a.far || (t.push({\n        distance: p,\n        point: d.clone().applyMatrix4(this.matrixWorld),\n        index: h,\n        face: null,\n        faceIndex: null,\n        object: this\n      }), h = x);\n    }\n  }\n}\nexport {\n  S as MeshLineGeometry,\n  V as MeshLineMaterial,\n  k as raycast\n};\n"],"mappings":"AAAA,OAAO,KAAKA,CAAC,MAAM,OAAO;AAC1B,SAASC,CAAC,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACxB,IAAIC,CAAC;EACL,IAAIL,CAAC,GAAGA,CAAC,CAACM,QAAQ,IAAIN,CAAC,CAACO,KAAK,GAAGP,CAAC,GAAGA,CAAC,CAACQ,MAAM,EAAEN,CAAC,GAAGA,CAAC,CAACI,QAAQ,IAAIJ,CAAC,CAACK,KAAK,GAAGL,CAAC,GAAGA,CAAC,CAACM,MAAM,EAAER,CAAC,GAAGC,CAAC,GAAGD,CAAC,CAACM,QAAQ,GAAGN,CAAC,CAACM,QAAQ,CAACL,CAAC,EAAEG,CAAC,IAAIH,CAAC,GAAGG,CAAC,CAAC,GAAGJ,CAAC,CAACO,KAAK,CAACN,CAAC,EAAEG,CAAC,IAAIH,CAAC,GAAGG,CAAC,CAAC,GAAGJ,CAAC,EAAEE,CAAC,CAACO,GAAG,EACxKP,CAAC,CAACO,GAAG,CAACT,CAAC,EAAEG,CAAC,CAAC,CAAC,KAEZ,KAAKE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,CAAC,CAACU,MAAM,EAAEL,CAAC,EAAE,EAC3BH,CAAC,CAACG,CAAC,GAAGF,CAAC,CAAC,GAAGH,CAAC,CAACK,CAAC,CAAC;EACnB,OAAOH,CAAC;AACV;AACA,MAAMS,CAAC,SAASb,CAAC,CAACc,cAAc,CAAC;EAC/BC,WAAW,GAAG;IACZ,KAAK,EAAE,EAAE,IAAI,CAACC,IAAI,GAAG,UAAU,EAAE,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC,EAAE,IAAI,CAACC,SAAS,GAAG,EAAE,EAAE,IAAI,CAACC,QAAQ,GAAG,EAAE,EAAE,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE,IAAI,CAACC,KAAK,GAAG,EAAE,EAAE,IAAI,CAACC,aAAa,GAAG,EAAE,EAAE,IAAI,CAACC,GAAG,GAAG,EAAE,EAAE,IAAI,CAACC,QAAQ,GAAG,EAAE,EAAE,IAAI,CAACC,OAAO,GAAG,EAAE,EAAE,IAAI,CAACC,KAAK,GAAG,IAAI,EAAE,IAAI,CAACC,aAAa,GAAG,IAAI,EAAE,IAAI,CAACC,WAAW,GAAG,IAAI7B,CAAC,CAAC8B,OAAO,EAAE,EAAEC,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAC9UC,QAAQ,EAAE;QACRC,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACR,KAAK;QACnB,CAAC;QACDhB,GAAG,CAACR,CAAC,EAAE;UACL,IAAI,CAACiC,WAAW,CAACjC,CAAC,EAAE,IAAI,CAACyB,aAAa,CAAC;QACzC;MACF,CAAC;MACDS,MAAM,EAAE;QACNH,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACT,OAAO;QACrB,CAAC;QACDf,GAAG,CAACR,CAAC,EAAE;UACL,IAAI,CAACmC,SAAS,CAACnC,CAAC,EAAE,IAAI,CAACyB,aAAa,CAAC;QACvC;MACF;IACF,CAAC,CAAC;EACJ;EACAW,cAAc,CAACpC,CAAC,EAAE;IAChB,IAAI,CAAC0B,WAAW,GAAG1B,CAAC;EACtB;EACAiC,WAAW,CAACjC,CAAC,EAAEC,CAAC,EAAE;IAChBD,CAAC,YAAYH,CAAC,CAACc,cAAc,KAAK,IAAI,CAAC0B,SAAS,GAAGrC,CAAC,EAAE,IAAI,CAACmC,SAAS,CAACnC,CAAC,CAACsC,YAAY,CAAC,UAAU,CAAC,CAACC,KAAK,EAAEtC,CAAC,CAAC,CAAC;EAC5G;EACAkC,SAAS,CAACnC,CAAC,EAAEC,CAAC,EAAE;IACd,IAAI,EAAED,CAAC,YAAYwC,YAAY,CAAC,IAAI,EAAExC,CAAC,YAAYyC,KAAK,CAAC,EAAE;MACzDC,OAAO,CAACC,KAAK,CAAC,+DAA+D,CAAC;MAC9E;IACF;IACA,IAAI,IAAI,CAACpB,OAAO,GAAGvB,CAAC,EAAE,IAAI,CAACyB,aAAa,GAAGxB,CAAC,EAAE,IAAI,CAACc,SAAS,GAAG,EAAE,EAAE,IAAI,CAACO,QAAQ,GAAG,EAAE,EAAEtB,CAAC,CAACS,MAAM,IAAIT,CAAC,CAAC,CAAC,CAAC,YAAYH,CAAC,CAAC+C,OAAO,EAC1H,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACS,MAAM,EAAEP,CAAC,EAAE,EAAE;MACjC,MAAMC,CAAC,GAAGH,CAAC,CAACE,CAAC,CAAC;QAAEE,CAAC,GAAGF,CAAC,IAAIF,CAAC,CAACS,MAAM,GAAG,CAAC,CAAC;MACtC,IAAI,CAACM,SAAS,CAAC8B,IAAI,CAAC1C,CAAC,CAAC2C,CAAC,EAAE3C,CAAC,CAAC4C,CAAC,EAAE5C,CAAC,CAAC6C,CAAC,CAAC,EAAE,IAAI,CAACjC,SAAS,CAAC8B,IAAI,CAAC1C,CAAC,CAAC2C,CAAC,EAAE3C,CAAC,CAAC4C,CAAC,EAAE5C,CAAC,CAAC6C,CAAC,CAAC,EAAE,IAAI,CAAC1B,QAAQ,CAACuB,IAAI,CAACzC,CAAC,CAAC,EAAE,IAAI,CAACkB,QAAQ,CAACuB,IAAI,CAACzC,CAAC,CAAC;IACtH,CAAC,MAED,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACS,MAAM,EAAEP,CAAC,IAAI,CAAC,EAAE;MACpC,MAAMC,CAAC,GAAGD,CAAC,IAAIF,CAAC,CAACS,MAAM,GAAG,CAAC,CAAC;MAC5B,IAAI,CAACM,SAAS,CAAC8B,IAAI,CAAC7C,CAAC,CAACE,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACa,SAAS,CAAC8B,IAAI,CAAC7C,CAAC,CAACE,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACoB,QAAQ,CAACuB,IAAI,CAAC1C,CAAC,CAAC,EAAE,IAAI,CAACmB,QAAQ,CAACuB,IAAI,CAAC1C,CAAC,CAAC;IAC5I;IACF,IAAI,CAAC8C,OAAO,EAAE;EAChB;EACAC,SAAS,CAAClD,CAAC,EAAEC,CAAC,EAAE;IACd,MAAMC,CAAC,GAAGF,CAAC,GAAG,CAAC;MAAEG,CAAC,GAAGF,CAAC,GAAG,CAAC;IAC1B,OAAO,IAAI,CAACc,SAAS,CAACb,CAAC,CAAC,KAAK,IAAI,CAACa,SAAS,CAACZ,CAAC,CAAC,IAAI,IAAI,CAACY,SAAS,CAACb,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAACa,SAAS,CAACZ,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAACY,SAAS,CAACb,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,CAACa,SAAS,CAACZ,CAAC,GAAG,CAAC,CAAC;EACtJ;EACAgD,MAAM,CAACnD,CAAC,EAAE;IACR,MAAMC,CAAC,GAAGD,CAAC,GAAG,CAAC;IACf,OAAO,CAAC,IAAI,CAACe,SAAS,CAACd,CAAC,CAAC,EAAE,IAAI,CAACc,SAAS,CAACd,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACc,SAAS,CAACd,CAAC,GAAG,CAAC,CAAC,CAAC;EAC1E;EACAgD,OAAO,GAAG;IACR,MAAMjD,CAAC,GAAG,IAAI,CAACe,SAAS,CAACN,MAAM,GAAG,CAAC;IACnC,IAAI,CAACO,QAAQ,GAAG,EAAE,EAAE,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE,IAAI,CAACC,KAAK,GAAG,EAAE,EAAE,IAAI,CAACC,aAAa,GAAG,EAAE,EAAE,IAAI,CAACC,GAAG,GAAG,EAAE;IAC3G,IAAIpB,CAAC,EAAEC,CAAC;IACR,IAAI,CAACgD,SAAS,CAAC,CAAC,EAAElD,CAAC,GAAG,CAAC,CAAC,GAAGE,CAAC,GAAG,IAAI,CAACiD,MAAM,CAACnD,CAAC,GAAG,CAAC,CAAC,GAAGE,CAAC,GAAG,IAAI,CAACiD,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACnC,QAAQ,CAAC6B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACc,QAAQ,CAAC6B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;IAClJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;MAC1B,IAAI,IAAI,CAACe,IAAI,CAAC2B,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC3B,IAAI,CAAC2B,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACpB,aAAa,GAAGxB,CAAC,GAAG,IAAI,CAACwB,aAAa,CAACtB,CAAC,IAAIH,CAAC,GAAG,CAAC,CAAC,CAAC,GAAGC,CAAC,GAAG,CAAC,EAAE,IAAI,CAACkB,KAAK,CAAC0B,IAAI,CAAC5C,CAAC,CAAC,EAAE,IAAI,CAACkB,KAAK,CAAC0B,IAAI,CAAC5C,CAAC,CAAC,EAAE,IAAI,CAACoB,GAAG,CAACwB,IAAI,CAAC1C,CAAC,IAAIH,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAACqB,GAAG,CAACwB,IAAI,CAAC1C,CAAC,IAAIH,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEG,CAAC,GAAGH,CAAC,GAAG,CAAC,EAAE;QAC5NE,CAAC,GAAG,IAAI,CAACiD,MAAM,CAAChD,CAAC,CAAC,EAAE,IAAI,CAACa,QAAQ,CAAC6B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACc,QAAQ,CAAC6B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9F,MAAME,CAAC,GAAGD,CAAC,GAAG,CAAC;QACf,IAAI,CAACiB,aAAa,CAACyB,IAAI,CAACzC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACgB,aAAa,CAACyB,IAAI,CAACzC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;MACxF;MACAD,CAAC,GAAG,CAAC,KAAKD,CAAC,GAAG,IAAI,CAACiD,MAAM,CAAChD,CAAC,CAAC,EAAE,IAAI,CAACc,IAAI,CAAC4B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC4B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnG;IACA,IAAI,CAACgD,SAAS,CAAClD,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAGE,CAAC,GAAG,IAAI,CAACiD,MAAM,CAAC,CAAC,CAAC,GAAGjD,CAAC,GAAG,IAAI,CAACiD,MAAM,CAACnD,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACiB,IAAI,CAAC4B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAACe,IAAI,CAAC4B,IAAI,CAAC3C,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAACkD,WAAW,IAAI,IAAI,CAACA,WAAW,CAACC,QAAQ,CAACC,KAAK,KAAK,IAAI,CAACvC,SAAS,CAACN,MAAM,GAAG,IAAI,CAAC2C,WAAW,GAAG;MAC9OC,QAAQ,EAAE,IAAIxD,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACzB,SAAS,CAAC,EAAE,CAAC,CAAC;MACpEC,QAAQ,EAAE,IAAInB,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACxB,QAAQ,CAAC,EAAE,CAAC,CAAC;MACnEC,IAAI,EAAE,IAAIpB,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACvB,IAAI,CAAC,EAAE,CAAC,CAAC;MAC3DC,IAAI,EAAE,IAAIrB,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACtB,IAAI,CAAC,EAAE,CAAC,CAAC;MAC3DC,KAAK,EAAE,IAAItB,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACrB,KAAK,CAAC,EAAE,CAAC,CAAC;MAC7DqC,EAAE,EAAE,IAAI3D,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAACnB,GAAG,CAAC,EAAE,CAAC,CAAC;MACxDoC,KAAK,EAAE,IAAI5D,CAAC,CAAC0D,eAAe,CAAC,IAAIG,WAAW,CAAC,IAAI,CAACtC,aAAa,CAAC,EAAE,CAAC,CAAC;MACpEE,QAAQ,EAAE,IAAIzB,CAAC,CAAC0D,eAAe,CAAC,IAAIf,YAAY,CAAC,IAAI,CAAClB,QAAQ,CAAC,EAAE,CAAC;IACpE,CAAC,IAAI,IAAI,CAAC8B,WAAW,CAACC,QAAQ,CAACM,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACzB,SAAS,CAAC,CAAC,EAAE,IAAI,CAACqC,WAAW,CAACC,QAAQ,CAACO,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACpC,QAAQ,CAAC2C,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACxB,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACoC,WAAW,CAACpC,QAAQ,CAAC4C,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACnC,IAAI,CAAC0C,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACvB,IAAI,CAAC,CAAC,EAAE,IAAI,CAACmC,WAAW,CAACnC,IAAI,CAAC2C,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAAClC,IAAI,CAACyC,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACtB,IAAI,CAAC,CAAC,EAAE,IAAI,CAACkC,WAAW,CAAClC,IAAI,CAAC0C,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACjC,KAAK,CAACwC,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACrB,KAAK,CAAC,CAAC,EAAE,IAAI,CAACiC,WAAW,CAACjC,KAAK,CAACyC,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACI,EAAE,CAACG,SAAS,CAAC,IAAInB,YAAY,CAAC,IAAI,CAACnB,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC+B,WAAW,CAACI,EAAE,CAACI,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACK,KAAK,CAACE,SAAS,CAAC,IAAID,WAAW,CAAC,IAAI,CAACtC,aAAa,CAAC,CAAC,EAAE,IAAI,CAACgC,WAAW,CAACK,KAAK,CAACG,WAAW,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAACC,YAAY,CAAC,UAAU,EAAE,IAAI,CAACT,WAAW,CAACC,QAAQ,CAAC,EAAE,IAAI,CAACQ,YAAY,CAAC,UAAU,EAAE,IAAI,CAACT,WAAW,CAACpC,QAAQ,CAAC,EAAE,IAAI,CAAC6C,YAAY,CAAC,MAAM,EAAE,IAAI,CAACT,WAAW,CAACnC,IAAI,CAAC,EAAE,IAAI,CAAC4C,YAAY,CAAC,MAAM,EAAE,IAAI,CAACT,WAAW,CAAClC,IAAI,CAAC,EAAE,IAAI,CAAC2C,YAAY,CAAC,OAAO,EAAE,IAAI,CAACT,WAAW,CAACjC,KAAK,CAAC,EAAE,IAAI,CAAC0C,YAAY,CAAC,IAAI,EAAE,IAAI,CAACT,WAAW,CAACI,EAAE,CAAC,EAAE,IAAI,CAACK,YAAY,CAAC,UAAU,EAAE,IAAI,CAACT,WAAW,CAAC9B,QAAQ,CAAC,EAAE,IAAI,CAACwC,QAAQ,CAAC,IAAI,CAACV,WAAW,CAACK,KAAK,CAAC,EAAE,IAAI,CAACM,qBAAqB,EAAE,EAAE,IAAI,CAACC,kBAAkB,EAAE;EACrsC;EACAC,OAAO,OAAuB;IAAA,IAAtB;MAAEnB,CAAC,EAAE9C,CAAC;MAAE+C,CAAC,EAAE9C,CAAC;MAAE+C,CAAC,EAAE9C;IAAE,CAAC;IAC1B,MAAMC,CAAC,GAAG,IAAI,CAACiD,WAAW,CAACC,QAAQ,CAACd,KAAK;MAAEnC,CAAC,GAAG,IAAI,CAACgD,WAAW,CAACpC,QAAQ,CAACuB,KAAK;MAAE2B,CAAC,GAAG,IAAI,CAACd,WAAW,CAACnC,IAAI,CAACsB,KAAK;MAAE4B,CAAC,GAAGhE,CAAC,CAACM,MAAM;IAC7HX,CAAC,CAACK,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE+D,CAAC,CAAC,EAAErE,CAAC,CAACK,CAAC,EAAE,CAAC,EAAEA,CAAC,EAAE,CAAC,EAAEgE,CAAC,GAAG,CAAC,CAAC,EAAEhE,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGnE,CAAC,EAAEG,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGlE,CAAC,EAAEE,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGjE,CAAC,EAAEC,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGnE,CAAC,EAAEG,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGlE,CAAC,EAAEE,CAAC,CAACgE,CAAC,GAAG,CAAC,CAAC,GAAGjE,CAAC,EAAEJ,CAAC,CAACK,CAAC,EAAE,CAAC,EAAE+D,CAAC,EAAE,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,EAAED,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGnE,CAAC,EAAEkE,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGlE,CAAC,EAAEiE,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGjE,CAAC,EAAEgE,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGnE,CAAC,EAAEkE,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGlE,CAAC,EAAEiE,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,GAAGjE,CAAC,EAAE,IAAI,CAACkD,WAAW,CAACC,QAAQ,CAACO,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACpC,QAAQ,CAAC4C,WAAW,GAAG,CAAC,CAAC,EAAE,IAAI,CAACR,WAAW,CAACnC,IAAI,CAAC2C,WAAW,GAAG,CAAC,CAAC;EACtW;AACF;AACA/D,CAAC,CAACuE,WAAW,CAACC,aAAa,GAAI;AAC/B;AACA,IAAIxE,CAAC,CAACuE,WAAW,CAACE,uBAAwB;AAC1C,IAAIzE,CAAC,CAACuE,WAAW,CAACG,eAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM1E,CAAC,CAACuE,WAAW,CAACI,kBAAmB;AACvC,MAAM3E,CAAC,CAACuE,WAAW,CAACK,UAAW;AAC/B;AACA,MAAM5E,CAAC,CAACuE,WAAW,CAACK,UAAW;AAC/B,IAAI;AACJ5E,CAAC,CAACuE,WAAW,CAACM,aAAa,GAAI;AAC/B;AACA,IAAI7E,CAAC,CAACuE,WAAW,CAACO,iBAAkB;AACpC,IAAI9E,CAAC,CAACuE,WAAW,CAACQ,yBAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM/E,CAAC,CAACuE,WAAW,CAACS,oBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMhF,CAAC,CAACuE,WAAW,CAACU,YAAa;AACjC;AACA;AACA,IAAI;AACJ,MAAMC,CAAC,SAASlF,CAAC,CAACmF,cAAc,CAAC;EAC/BpE,WAAW,CAACZ,CAAC,EAAE;IACb,KAAK,CAAC;MACJiF,QAAQ,EAAErD,MAAM,CAACsD,MAAM,CAAC,CAAC,CAAC,EAAErF,CAAC,CAACsF,WAAW,CAACC,GAAG,EAAE;QAC7CC,SAAS,EAAE;UAAEC,KAAK,EAAE;QAAE,CAAC;QACvBC,GAAG,EAAE;UAAED,KAAK,EAAE;QAAK,CAAC;QACpBE,MAAM,EAAE;UAAEF,KAAK,EAAE;QAAE,CAAC;QACpBG,QAAQ,EAAE;UAAEH,KAAK,EAAE;QAAK,CAAC;QACzBI,WAAW,EAAE;UAAEJ,KAAK,EAAE;QAAE,CAAC;QACzBK,KAAK,EAAE;UAAEL,KAAK,EAAE,IAAIzF,CAAC,CAAC+F,KAAK,CAAC,QAAQ;QAAE,CAAC;QACvCC,OAAO,EAAE;UAAEP,KAAK,EAAE;QAAE,CAAC;QACrBQ,UAAU,EAAE;UAAER,KAAK,EAAE,IAAIzF,CAAC,CAACkG,OAAO,CAAC,CAAC,EAAE,CAAC;QAAE,CAAC;QAC1CC,eAAe,EAAE;UAAEV,KAAK,EAAE;QAAE,CAAC;QAC7BW,SAAS,EAAE;UAAEX,KAAK,EAAE;QAAE,CAAC;QACvBY,UAAU,EAAE;UAAEZ,KAAK,EAAE;QAAE,CAAC;QACxBa,SAAS,EAAE;UAAEb,KAAK,EAAE;QAAI,CAAC;QACzBc,OAAO,EAAE;UAAEd,KAAK,EAAE;QAAE,CAAC;QACrBe,UAAU,EAAE;UAAEf,KAAK,EAAE;QAAE,CAAC;QACxBgB,SAAS,EAAE;UAAEhB,KAAK,EAAE;QAAE,CAAC;QACvBiB,MAAM,EAAE;UAAEjB,KAAK,EAAE,IAAIzF,CAAC,CAACkG,OAAO,CAAC,CAAC,EAAE,CAAC;QAAE;MACvC,CAAC,CAAC;MACFS,YAAY,EAAE3G,CAAC,CAACuE,WAAW,CAACC,aAAa;MACzCoC,cAAc,EAAE5G,CAAC,CAACuE,WAAW,CAACM;IAChC,CAAC,CAAC,EAAE,IAAI,CAAC7D,IAAI,GAAG,kBAAkB,EAAEe,MAAM,CAACC,gBAAgB,CAAC,IAAI,EAAE;MAChEwD,SAAS,EAAE;QACTtD,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACI,SAAS,CAACC,KAAK;QACtC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACI,SAAS,CAACC,KAAK,GAAGrF,CAAC;QACnC;MACF,CAAC;MACDsF,GAAG,EAAE;QACHxD,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACM,GAAG,CAACD,KAAK;QAChC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACM,GAAG,CAACD,KAAK,GAAGrF,CAAC;QAC7B;MACF,CAAC;MACDuF,MAAM,EAAE;QACNzD,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACO,MAAM,CAACF,KAAK;QACnC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACO,MAAM,CAACF,KAAK,GAAGrF,CAAC;QAChC;MACF,CAAC;MACDwF,QAAQ,EAAE;QACR1D,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACQ,QAAQ,CAACH,KAAK;QACrC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACQ,QAAQ,CAACH,KAAK,GAAGrF,CAAC;QAClC;MACF,CAAC;MACDyF,WAAW,EAAE;QACX3D,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACS,WAAW,CAACJ,KAAK;QACxC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACS,WAAW,CAACJ,KAAK,GAAGrF,CAAC;QACrC;MACF,CAAC;MACD0F,KAAK,EAAE;QACL5D,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACU,KAAK,CAACL,KAAK;QAClC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACU,KAAK,CAACL,KAAK,GAAGrF,CAAC;QAC/B;MACF,CAAC;MACD4F,OAAO,EAAE;QACP9D,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACY,OAAO,CAACP,KAAK;QACpC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACY,OAAO,CAACP,KAAK,GAAGrF,CAAC;QACjC;MACF,CAAC;MACD6F,UAAU,EAAE;QACV/D,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACa,UAAU,CAACR,KAAK;QACvC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACa,UAAU,CAACR,KAAK,CAACoB,IAAI,CAACzG,CAAC,CAAC;QACxC;MACF,CAAC;MACD+F,eAAe,EAAE;QACfjE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACe,eAAe,CAACV,KAAK;QAC5C,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACe,eAAe,CAACV,KAAK,GAAGrF,CAAC;QACzC;MACF,CAAC;MACDgG,SAAS,EAAE;QACTlE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACgB,SAAS,CAACX,KAAK;QACtC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACgB,SAAS,CAACX,KAAK,GAAGrF,CAAC,EAAE,IAAI,CAACmG,OAAO,GAAGnG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QACnE;MACF,CAAC;MACDiG,UAAU,EAAE;QACVnE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACiB,UAAU,CAACZ,KAAK;QACvC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACiB,UAAU,CAACZ,KAAK,GAAGrF,CAAC;QACpC;MACF,CAAC;MACDkG,SAAS,EAAE;QACTpE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACkB,SAAS,CAACb,KAAK;QACtC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACkB,SAAS,CAACb,KAAK,GAAGrF,CAAC;QACnC;MACF,CAAC;MACDmG,OAAO,EAAE;QACPrE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACmB,OAAO,CAACd,KAAK;QACpC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACmB,OAAO,CAACd,KAAK,GAAGrF,CAAC;QACjC;MACF,CAAC;MACDoG,UAAU,EAAE;QACVtE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACoB,UAAU,CAACf,KAAK;QACvC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACoB,UAAU,CAACf,KAAK,GAAGrF,CAAC;QACpC;MACF,CAAC;MACDqG,SAAS,EAAE;QACTvE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACqB,SAAS,CAAChB,KAAK;QACtC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACqB,SAAS,CAAChB,KAAK,GAAGrF,CAAC;QACnC;MACF,CAAC;MACDsG,MAAM,EAAE;QACNxE,UAAU,EAAE,CAAC,CAAC;QACdC,GAAG,GAAG;UACJ,OAAO,IAAI,CAACiD,QAAQ,CAACsB,MAAM,CAACjB,KAAK;QACnC,CAAC;QACD9E,GAAG,CAACP,CAAC,EAAE;UACL,IAAI,CAACgF,QAAQ,CAACsB,MAAM,CAACjB,KAAK,CAACoB,IAAI,CAACzG,CAAC,CAAC;QACpC;MACF;IACF,CAAC,CAAC,EAAE,IAAI,CAAC0G,SAAS,CAAC3G,CAAC,CAAC;EACvB;EACA0G,IAAI,CAAC1G,CAAC,EAAE;IACN,OAAO,KAAK,CAAC0G,IAAI,CAAC1G,CAAC,CAAC,EAAE,IAAI,CAACqF,SAAS,GAAGrF,CAAC,CAACqF,SAAS,EAAE,IAAI,CAACE,GAAG,GAAGvF,CAAC,CAACuF,GAAG,EAAE,IAAI,CAACC,MAAM,GAAGxF,CAAC,CAACwF,MAAM,EAAE,IAAI,CAACC,QAAQ,GAAGzF,CAAC,CAACyF,QAAQ,EAAE,IAAI,CAACC,WAAW,GAAG1F,CAAC,CAAC0F,WAAW,EAAE,IAAI,CAACC,KAAK,CAACe,IAAI,CAAC1G,CAAC,CAAC2F,KAAK,CAAC,EAAE,IAAI,CAACE,OAAO,GAAG7F,CAAC,CAAC6F,OAAO,EAAE,IAAI,CAACC,UAAU,CAACY,IAAI,CAAC1G,CAAC,CAAC8F,UAAU,CAAC,EAAE,IAAI,CAACE,eAAe,GAAGhG,CAAC,CAACgG,eAAe,EAAE,IAAI,CAACC,SAAS,CAACS,IAAI,CAAC1G,CAAC,CAACiG,SAAS,CAAC,EAAE,IAAI,CAACC,UAAU,CAACQ,IAAI,CAAC1G,CAAC,CAACkG,UAAU,CAAC,EAAE,IAAI,CAACC,SAAS,CAACO,IAAI,CAAC1G,CAAC,CAACmG,SAAS,CAAC,EAAE,IAAI,CAACC,OAAO,GAAGpG,CAAC,CAACoG,OAAO,EAAE,IAAI,CAACC,UAAU,GAAGrG,CAAC,CAACqG,UAAU,EAAE,IAAI,CAACC,SAAS,GAAGtG,CAAC,CAACsG,SAAS,EAAE,IAAI,CAACC,MAAM,CAACG,IAAI,CAAC1G,CAAC,CAACuG,MAAM,CAAC,EAAE,IAAI;EAChgB;AACF;AACA,SAASK,CAAC,CAAC7G,CAAC,EAAEC,CAAC,EAAE;EACf,MAAMC,CAAC,GAAG,IAAIJ,CAAC,CAAC8B,OAAO,EAAE;IAAEzB,CAAC,GAAG,IAAIL,CAAC,CAACgH,GAAG,EAAE;IAAE1G,CAAC,GAAG,IAAIN,CAAC,CAACiH,MAAM,EAAE;IAAE1G,CAAC,GAAG,IAAIP,CAAC,CAAC+C,OAAO,EAAE;IAAEsB,CAAC,GAAG,IAAI,CAACpC,QAAQ;EACtG,IAAI3B,CAAC,CAACuG,IAAI,CAACxC,CAAC,CAAC6C,cAAc,CAAC,EAAE5G,CAAC,CAAC6G,YAAY,CAAC,IAAI,CAACtF,WAAW,CAAC,EAAE3B,CAAC,CAACkH,GAAG,CAACC,eAAe,CAAC/G,CAAC,EAAEC,CAAC,CAAC,KAAK,CAAC,CAAC,EAChG;EACFH,CAAC,CAACyG,IAAI,CAAC,IAAI,CAAChF,WAAW,CAAC,CAACyF,MAAM,EAAE,EAAEjH,CAAC,CAACwG,IAAI,CAAC3G,CAAC,CAACkH,GAAG,CAAC,CAACD,YAAY,CAAC/G,CAAC,CAAC;EAChE,MAAMkE,CAAC,GAAG,IAAItE,CAAC,CAAC+C,OAAO,EAAE;IAAEwE,CAAC,GAAG,IAAIvH,CAAC,CAAC+C,OAAO,EAAE;IAAEyE,CAAC,GAAG,IAAIxH,CAAC,CAAC+C,OAAO,EAAE;IAAE0E,CAAC,GAAG,IAAI,YAAYzH,CAAC,CAAC0H,YAAY,GAAG,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAGtD,CAAC,CAACT,KAAK;IAAEgE,CAAC,GAAGvD,CAAC,CAACwD,UAAU;EAC9I,IAAIF,CAAC,KAAK,IAAI,EAAE;IACd,MAAMG,CAAC,GAAGH,CAAC,CAACjF,KAAK;MAAEQ,CAAC,GAAG0E,CAAC,CAACpE,QAAQ,CAACd,KAAK;MAAEqF,CAAC,GAAGH,CAAC,CAACtG,KAAK,CAACoB,KAAK;IAC1D,KAAK,IAAIsF,CAAC,GAAG,CAAC,EAAE/E,CAAC,GAAG6E,CAAC,CAAClH,MAAM,GAAG,CAAC,EAAEoH,CAAC,GAAG/E,CAAC,EAAE+E,CAAC,IAAIP,CAAC,EAAE;MAC/C,MAAMQ,CAAC,GAAGH,CAAC,CAACE,CAAC,CAAC;QAAEE,CAAC,GAAGJ,CAAC,CAACE,CAAC,GAAG,CAAC,CAAC;MAC5B1D,CAAC,CAAC6D,SAAS,CAACjF,CAAC,EAAE+E,CAAC,GAAG,CAAC,CAAC,EAAEV,CAAC,CAACY,SAAS,CAACjF,CAAC,EAAEgF,CAAC,GAAG,CAAC,CAAC;MAC5C,MAAME,CAAC,GAAGL,CAAC,CAACM,IAAI,CAACC,KAAK,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,GAAGD,CAAC,CAACM,IAAI,CAACC,KAAK,CAACN,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAAEO,CAAC,GAAGrI,CAAC,CAACsI,MAAM,CAACC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,QAAQ,CAACnD,SAAS,GAAG4C,CAAC,GAAG,CAAC;QAAEQ,CAAC,GAAGL,CAAC,GAAGA,CAAC;MAC3I,IAAIlI,CAAC,CAACwI,mBAAmB,CAACvE,CAAC,EAAEiD,CAAC,EAAEhH,CAAC,EAAEiH,CAAC,CAAC,GAAGoB,CAAC,EACvC;MACFrI,CAAC,CAAC4G,YAAY,CAAC,IAAI,CAACtF,WAAW,CAAC;MAChC,MAAMiH,CAAC,GAAG5I,CAAC,CAACkH,GAAG,CAAC2B,MAAM,CAACC,UAAU,CAACzI,CAAC,CAAC;MACpCuI,CAAC,GAAG5I,CAAC,CAAC+I,IAAI,IAAIH,CAAC,GAAG5I,CAAC,CAACgJ,GAAG,KAAK/I,CAAC,CAAC6C,IAAI,CAAC;QACjCmG,QAAQ,EAAEL,CAAC;QACXM,KAAK,EAAE5B,CAAC,CAAC6B,KAAK,EAAE,CAAClC,YAAY,CAAC,IAAI,CAACtF,WAAW,CAAC;QAC/C+B,KAAK,EAAEoE,CAAC;QACRsB,IAAI,EAAE,IAAI;QACVC,SAAS,EAAE,IAAI;QACfC,MAAM,EAAE;MACV,CAAC,CAAC,EAAExB,CAAC,GAAG/E,CAAC,CAAC;IACZ;EACF;AACF;AACA,SACEpC,CAAC,IAAI4I,gBAAgB,EACrBvE,CAAC,IAAIwE,gBAAgB,EACrB3C,CAAC,IAAI4C,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}