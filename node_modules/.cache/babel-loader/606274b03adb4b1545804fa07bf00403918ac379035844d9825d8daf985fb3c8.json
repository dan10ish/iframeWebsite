{"ast":null,"code":"var _jsxFileName = \"/Users/danish/Documents/portfolio/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Html, ContactShadows, PresentationControls, Float, Environment, useGLTF } from \"@react-three/drei\";\nimport \"./App.css\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = _ref => {\n  _s();\n  let {\n    p = new THREE.Vector3(),\n    q = new THREE.Quaternion(),\n    c = new THREE.PerspectiveCamera()\n  } = _ref;\n  const laptop = useGLTF(\"./laptop.gltf\");\n  const state = useThree();\n\n  // We need to know what object was clicked\n  // Keeping track of this in state is not super advisable but this setup\n  // relies on a new selection causing a re-render. It's probably better\n  // to keep track of this in a ref\n  const [clicked, setClicked] = useState(null);\n\n  // On first render just point the camera where we want it\n  useEffect(() => {\n    state.camera.lookAt(0, 0, 0);\n  }, []);\n\n  // This is where the magic happens\n  // On re-render, we want to...\n  useEffect(() => {\n    // ...check if there is a currently selected object\n    if (clicked !== null) {\n      // Update the selected objects world matrix (not sure this is necessary)\n      // (true, true) updates it's children and parent matrices I believe\n      clicked.updateWorldMatrix(true, true);\n\n      // Put our object into a const because I want to\n      const selection = clicked;\n\n      // Grab the position of our selection\n      const {\n        position\n      } = selection;\n\n      // Grab the values we assign to object userData.\n      // In the return block you can see the value viewPos is a three entry array representing\n      // the x, y, and z we want to view the selection from **with relation to the selection**.\n\n      // Make that a Vector3\n      const viewPos = new THREE.Vector3(...selection.userData.viewPos);\n\n      // Using the position of the selection, we add our view position.\n      // This will give us the world position for our target camera.\n      const camPosTarget = new THREE.Vector3(...position).add(viewPos);\n\n      // Put the target camera in the right position.\n      c.position.set(...camPosTarget);\n\n      // Point the target camera where you want to look.\n      // In this case we are just going to look right at the selection.\n      c.lookAt(...position);\n\n      // copy the quaternion of the target camera into q.\n      // You can also use .set(...c.quaternion) but copy is cleaner.\n      q.copy(c.quaternion);\n\n      // copy the position of the target camera into p.\n      p.copy(c.position);\n    } else {\n      // If nothing is clicked we want to set p back to our start position.\n      // In our case we are just hardcoding our camera position back in.\n      p.set(0, 0, 10);\n\n      // .identity() resets a quaternion to no rotation.\n      // This doesn't bring us back to our original rotation that we set on line 27.\n      // You could do that if you want using the same method we use to animate\n      // to our target positions.\n      // You'll actually notice if you refresh that the camera instanly pans up because of this.\n      q.identity();\n    }\n  });\n\n  // On every frame...\n  useFrame((state, dt) => {\n    // ...lerp (linear interpolate) the camera position to p.\n    state.camera.position.lerp(p, THREE.MathUtils.damp(0, 1, 3, dt));\n\n    // ...slerp (spherical linear interpolate) the camera rotation to quaternion q.\n    state.camera.quaternion.slerp(q, THREE.MathUtils.damp(0, 1, 3, dt));\n\n    // I don't have anything to say about lerp and slerp that the docs don't have.\n    // No idea what damp actually does, probably just smooths it out.\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Environment, {\n      preset: \"city\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PresentationControls, {\n      global: true,\n      rotation: [0.13, 0.1, 0],\n      polar: [-0.4, 0.2],\n      azimuth: [-1, 0.75],\n      config: {\n        mass: 2,\n        tension: 400\n      },\n      snap: {\n        mass: 4,\n        tension: 400\n      },\n      children: /*#__PURE__*/_jsxDEV(Float, {\n        rotationIntensity: 0.4,\n        children: [/*#__PURE__*/_jsxDEV(\"rectAreaLight\", {\n          width: 2.5,\n          height: 1.65,\n          intensity: 65,\n          color: \"#ff6900\",\n          rotation: [-0.1, Math.PI, 0],\n          position: [0, 0.55, -1.15]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"primitive\", {\n          object: laptop.scene,\n          \"position-y\": -1.2,\n          userData: {\n            viewPos: [0, 0, 0]\n          },\n          onClick: e => {\n            e.stopPropagation();\n            if (clicked === e.object) {\n              setClicked(null);\n            } else {\n              setClicked(e.object);\n            }\n          },\n          onPointerMissed: () => {\n            setClicked(null);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Html, {\n          transform: true,\n          wrapperClass: \"htmlScreen\",\n          distanceFactor: 1.17,\n          position: [0, 0.36, -1.4],\n          \"rotation-x\": -0.256,\n          children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n            src: \"https://danish.dev\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactShadows, {\n      \"position-y\": -1.4,\n      opacity: 0.4,\n      scale: 5,\n      blur: 2.4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"AWlDnjm97KxV9WpsZCPRDvWDqIU=\", false, function () {\n  return [useGLTF, useThree, useFrame];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","Html","ContactShadows","PresentationControls","Float","Environment","useGLTF","useFrame","useThree","THREE","App","p","Vector3","q","Quaternion","c","PerspectiveCamera","laptop","state","clicked","setClicked","camera","lookAt","updateWorldMatrix","selection","position","viewPos","userData","camPosTarget","add","set","copy","quaternion","identity","dt","lerp","MathUtils","damp","slerp","mass","tension","Math","PI","scene","e","stopPropagation","object"],"sources":["/Users/danish/Documents/portfolio/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  Html,\n  ContactShadows,\n  PresentationControls,\n  Float,\n  Environment,\n  useGLTF,\n} from \"@react-three/drei\";\nimport \"./App.css\";\nimport { useFrame, useThree } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\n\nconst App = ({\n  p = new THREE.Vector3(),\n  q = new THREE.Quaternion(),\n  c = new THREE.PerspectiveCamera(),\n}) => {\n  const laptop = useGLTF(\"./laptop.gltf\");\n\n  const state = useThree();\n\n  // We need to know what object was clicked\n  // Keeping track of this in state is not super advisable but this setup\n  // relies on a new selection causing a re-render. It's probably better\n  // to keep track of this in a ref\n  const [clicked, setClicked] = useState(null);\n\n  // On first render just point the camera where we want it\n  useEffect(() => {\n    state.camera.lookAt(0, 0, 0);\n  }, []);\n\n  // This is where the magic happens\n  // On re-render, we want to...\n  useEffect(() => {\n    // ...check if there is a currently selected object\n    if (clicked !== null) {\n      // Update the selected objects world matrix (not sure this is necessary)\n      // (true, true) updates it's children and parent matrices I believe\n      clicked.updateWorldMatrix(true, true);\n\n      // Put our object into a const because I want to\n      const selection = clicked;\n\n      // Grab the position of our selection\n      const { position } = selection;\n\n      // Grab the values we assign to object userData.\n      // In the return block you can see the value viewPos is a three entry array representing\n      // the x, y, and z we want to view the selection from **with relation to the selection**.\n\n      // Make that a Vector3\n      const viewPos = new THREE.Vector3(...selection.userData.viewPos);\n\n      // Using the position of the selection, we add our view position.\n      // This will give us the world position for our target camera.\n      const camPosTarget = new THREE.Vector3(...position).add(viewPos);\n\n      // Put the target camera in the right position.\n      c.position.set(...camPosTarget);\n\n      // Point the target camera where you want to look.\n      // In this case we are just going to look right at the selection.\n      c.lookAt(...position);\n\n      // copy the quaternion of the target camera into q.\n      // You can also use .set(...c.quaternion) but copy is cleaner.\n      q.copy(c.quaternion);\n\n      // copy the position of the target camera into p.\n      p.copy(c.position);\n    } else {\n      // If nothing is clicked we want to set p back to our start position.\n      // In our case we are just hardcoding our camera position back in.\n      p.set(0, 0, 10);\n\n      // .identity() resets a quaternion to no rotation.\n      // This doesn't bring us back to our original rotation that we set on line 27.\n      // You could do that if you want using the same method we use to animate\n      // to our target positions.\n      // You'll actually notice if you refresh that the camera instanly pans up because of this.\n      q.identity();\n    }\n  });\n\n  // On every frame...\n  useFrame((state, dt) => {\n    // ...lerp (linear interpolate) the camera position to p.\n    state.camera.position.lerp(p, THREE.MathUtils.damp(0, 1, 3, dt));\n\n    // ...slerp (spherical linear interpolate) the camera rotation to quaternion q.\n    state.camera.quaternion.slerp(q, THREE.MathUtils.damp(0, 1, 3, dt));\n\n    // I don't have anything to say about lerp and slerp that the docs don't have.\n    // No idea what damp actually does, probably just smooths it out.\n  });\n\n  return (\n    <>\n      <Environment preset=\"city\" />\n\n      <PresentationControls\n        global\n        rotation={[0.13, 0.1, 0]}\n        polar={[-0.4, 0.2]}\n        azimuth={[-1, 0.75]}\n        config={{ mass: 2, tension: 400 }}\n        snap={{ mass: 4, tension: 400 }}\n      >\n        <Float rotationIntensity={0.4}>\n          <rectAreaLight\n            width={2.5}\n            height={1.65}\n            intensity={65}\n            color={\"#ff6900\"}\n            rotation={[-0.1, Math.PI, 0]}\n            position={[0, 0.55, -1.15]}\n          />\n          <primitive\n            object={laptop.scene}\n            position-y={-1.2}\n            userData={{ viewPos: [0, 0, 0] }}\n            onClick={(e) => {\n              e.stopPropagation();\n              if (clicked === e.object) {\n                setClicked(null);\n              } else {\n                setClicked(e.object);\n              }\n            }}\n            onPointerMissed={() => {\n              setClicked(null);\n            }}\n          />\n\n          <Html\n            transform\n            wrapperClass=\"htmlScreen\"\n            distanceFactor={1.17}\n            position={[0, 0.36, -1.4]}\n            rotation-x={-0.256}\n          >\n            <iframe src=\"https://danish.dev\"></iframe>\n          </Html>\n        </Float>\n      </PresentationControls>\n\n      <ContactShadows position-y={-1.4} opacity={0.4} scale={5} blur={2.4} />\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}